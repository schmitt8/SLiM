/// neutral simulation of geographic expansion

initialize() /* initialize simulation */ {
	initializeMutationRate(0); // set mutation rate to 0 since we will add a single mutation manually below
	initializeMutationType("m1", 0.5, "f", 0); // define the type of mutation we will add, neutral in this case
	m1.convertToSubstitution = F; // keep track of mutation if it fixes
	initializeGenomicElementType("g1", m1, 1.0); // create a single genomic element 
	initializeGenomicElement(g1, 0, 0); // size and composition of chromosome, only one base long
	initializeRecombinationRate(1e-8); // set recombination rate - doesn't really matter for this simple scenario
	initializeSex("A"); // simulate sexual reproduction with two sexes
}





1 /* add subpopulations and migration rates between them */ {
	sim.addSubpop("p1", 1000);
	sim.addSubpop("p2", 750);
	sim.addSubpop("p3", 500);
	sim.addSubpop("p4", 250);
	sim.addSubpop("p5", 200);
	sim.addSubpop("p6", 150);
	sim.addSubpop("p7", 100);
	sim.addSubpop("p8", 50);
	sim.addSubpop("p9", 1000);
	sim.addSubpop("p10", 750);
	sim.addSubpop("p11", 500);
	sim.addSubpop("p12", 250);
	sim.addSubpop("p13", 200);
	sim.addSubpop("p14", 150);
	sim.addSubpop("p15", 100);
	sim.addSubpop("p16", 50);
	sim.addSubpop("p17", 1000);
	sim.addSubpop("p18", 750);
	sim.addSubpop("p19", 500);
	sim.addSubpop("p20", 250);
	sim.addSubpop("p21", 200);
	sim.addSubpop("p22", 150);
	sim.addSubpop("p23", 100);
	sim.addSubpop("p24", 50);
	p1.setMigrationRates(c(p2, p9, p17), c(0.01, 0.01, 0.01));
	p2.setMigrationRates(c(p1, p3), c(0.01, 0.01));
	p3.setMigrationRates(c(p2, p4), c(0.01, 0.01));
	p4.setMigrationRates(c(p3, p5), c(0.01, 0.01));
	p5.setMigrationRates(c(p4, p6), c(0.01, 0.01));
	p6.setMigrationRates(c(p5, p7), c(0.01, 0.01));
	p7.setMigrationRates(c(p6, p8), c(0.01, 0.01));
	p8.setMigrationRates(p7, 0.01);
	p9.setMigrationRates(c(p1, p10), c(0.01, 0.01));
	p10.setMigrationRates(c(p9, p11), c(0.01, 0.01));
	p11.setMigrationRates(c(p10, p12), c(0.01, 0.01));
	p12.setMigrationRates(c(p11, p13), c(0.01, 0.01));
	p13.setMigrationRates(c(p12, p14), c(0.01, 0.01));
	p14.setMigrationRates(c(p13, p15), c(0.01, 0.01));
	p15.setMigrationRates(c(p14, p16), c(0.01, 0.01));
	p16.setMigrationRates(p15, 0.01);
	p17.setMigrationRates(c(p1, p18), c(0.01, 0.01));
	p18.setMigrationRates(c(p17, p19), c(0.01, 0.01));
	p19.setMigrationRates(c(p18, p20), c(0.01, 0.01));
	p20.setMigrationRates(c(p19, p21), c(0.01, 0.01));
	p21.setMigrationRates(c(p20, p22), c(0.01, 0.01));
	p22.setMigrationRates(c(p21, p23), c(0.01, 0.01));
	p23.setMigrationRates(c(p22, p24), c(0.01, 0.01));
	p24.setMigrationRates(p23, 0.01);
}





1 late() /* add a single neutral mutation */{
	target = sample(p1.genomes, 20); // add mutation to subpopulation 1 at fequency of 1% (20 out of 2000 chromosomes)
	target.addNewDrawnMutation(m1, 0); // add mutation at genome position 0
}





2 /* first wave of geographic expansion: add new subpopulations and migration rates between subpopulations */ {
	sim.addSubpopSplit("p25", 100, p1);
	sim.addSubpopSplit("p26", 100, p1);
	sim.addSubpopSplit("p27", 100, p1);
	sim.addSubpopSplit("p28", 100, p1);
	p1.setMigrationRates(c(p2, p9, p25, p26, p27, p28), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p2.setMigrationRates(c(p1, p3, p26, p27), c(0.01, 0.01, 0.01, 0.01));
	p3.setMigrationRates(c(p2, p4), c(0.01, 0.01));
	p4.setMigrationRates(c(p3, p5), c(0.01, 0.01));
	p5.setMigrationRates(c(p4, p6), c(0.01, 0.01));
	p6.setMigrationRates(c(p5, p7), c(0.01, 0.01));
	p7.setMigrationRates(c(p6, p8), c(0.01, 0.01));
	p8.setMigrationRates(p7, 0.01);
	p9.setMigrationRates(c(p1, p10, p25), c(0.01, 0.01, 0.01));
	p10.setMigrationRates(c(p9, p11), c(0.01, 0.01));
	p11.setMigrationRates(c(p10 ,p12), c(0.01, 0.01));
	p12.setMigrationRates(c(p11, p13), c(0.01, 0.01));
	p13.setMigrationRates(c(p12, p14), c(0.01, 0.01));
	p14.setMigrationRates(c(p13, p15), c(0.01, 0.01));
	p15.setMigrationRates(c(p14, p16), c(0.01, 0.01));
	p16.setMigrationRates(p15, 0.01);
	p17.setMigrationRates(c(p1, p18, p28), c(0.01, 0.01, 0.01));
	p18.setMigrationRates(c(p17, p19), c(0.01, 0.01));
	p19.setMigrationRates(c(p18 ,p20), c(0.01, 0.01));
	p20.setMigrationRates(c(p19, p21), c(0.01, 0.01));
	p21.setMigrationRates(c(p20, p22), c(0.01, 0.01));
	p22.setMigrationRates(c(p21, p23), c(0.01, 0.01));
	p23.setMigrationRates(c(p22, p24), c(0.01, 0.01));
	p24.setMigrationRates(p23, 0.01);
	p25.setMigrationRates(c(p1, p9, p26), c(0.01, 0.01, 0.01));
	p26.setMigrationRates(c(p1, p2, p25), c(0.01, 0.01, 0.01));
	p27.setMigrationRates(c(p1, p2, p28), c(0.01, 0.01, 0.01));
	p28.setMigrationRates(c(p1, p17, p27), c(0.01, 0.01, 0.01));
}





2:9500 /* newly established subpops grow from 100 individuals to 750 over 9500 generations */ {
	if (sim.generation%14 == 0) {
		newSize = 100 + asInteger((sim.generation/14));
		p25.setSubpopulationSize(newSize);
		p26.setSubpopulationSize(newSize);
		p27.setSubpopulationSize(newSize);
		p28.setSubpopulationSize(newSize);
	}
	if (p25.individualCount > 750) {
		p25.setSubpopulationSize(750);
		p26.setSubpopulationSize(750);
		p27.setSubpopulationSize(750);
		p28.setSubpopulationSize(750);
	}
}





9501 /* second wave of geographic expansion: add new subpopulations and migration rates between subpopulations */ {
	sim.addSubpopSplit("p29", 100, p25);
	sim.addSubpopSplit("p30", 100, p25);
	sim.addSubpopSplit("p31", 100, p26);
	sim.addSubpopSplit("p32", 100, p26);
	sim.addSubpopSplit("p33", 100, p27);
	sim.addSubpopSplit("p34", 100, p27);
	sim.addSubpopSplit("p35", 100, p28);
	sim.addSubpopSplit("p36", 100, p28);
	p1.setMigrationRates(c(p2, p9, p25, p26, p27, p28), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p2.setMigrationRates(c(p1, p3, p26, p27, p32, p33), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p3.setMigrationRates(c(p2, p4, p26, p27, p32, p33), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p4.setMigrationRates(c(p3, p5), c(0.01, 0.01));
	p5.setMigrationRates(c(p4, p6), c(0.01, 0.01));
	p6.setMigrationRates(c(p5, p7), c(0.01, 0.01));
	p7.setMigrationRates(c(p6, p8), c(0.01, 0.01));
	p8.setMigrationRates(p7, 0.01);
	p9.setMigrationRates(c(p1, p10, p25, p29), c(0.01, 0.01, 0.01, 0.01));
	p10.setMigrationRates(c(p9, p11, p25, p29), c(0.01, 0.01, 0.01, 0.01));
	p11.setMigrationRates(c(p10 ,p12), c(0.01, 0.01));
	p12.setMigrationRates(c(p11, p13), c(0.01, 0.01));
	p13.setMigrationRates(c(p12, p14), c(0.01, 0.01));
	p14.setMigrationRates(c(p13, p15), c(0.01, 0.01));
	p15.setMigrationRates(c(p14, p16), c(0.01, 0.01));
	p16.setMigrationRates(p15, 0.01);
	p17.setMigrationRates(c(p1, p18, p28, p36), c(0.01, 0.01, 0.01, 0.01));
	p18.setMigrationRates(c(p17, p19, p36), c(0.01, 0.01, 0.01));
	p19.setMigrationRates(c(p18 ,p20), c(0.01, 0.01));
	p20.setMigrationRates(c(p19, p21), c(0.01, 0.01));
	p21.setMigrationRates(c(p20, p22), c(0.01, 0.01));
	p22.setMigrationRates(c(p21, p23), c(0.01, 0.01));
	p23.setMigrationRates(c(p22, p24), c(0.01, 0.01));
	p24.setMigrationRates(p23, 0.01);
	p25.setMigrationRates(c(p1, p9, p10, p26, p29, p30, p31), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p26.setMigrationRates(c(p1, p2, p3, p25, p30, p31, p32), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p27.setMigrationRates(c(p1, p2, p3, p28, p33, p34, p35), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p28.setMigrationRates(c(p1, p17, p18, p27, p34, p35, p36), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p29.setMigrationRates(c(p9, p10, p25, p30), c(0.01, 0.01, 0.01, 0.01));
	p30.setMigrationRates(c(p25, p26, p29, p31), c(0.01, 0.01, 0.01, 0.01));
	p31.setMigrationRates(c(p25, p26, p30, p32), c(0.01, 0.01, 0.01, 0.01));
	p32.setMigrationRates(c(p2, p3, p26, p31), c(0.01, 0.01, 0.01, 0.01));
	p33.setMigrationRates(c(p2, p3, p27, p34), c(0.01, 0.01, 0.01, 0.01));
	p34.setMigrationRates(c(p27, p28, p33, p35), c(0.01, 0.01, 0.01, 0.01));
	p35.setMigrationRates(c(p27, p28, p34, p36), c(0.01, 0.01, 0.01, 0.01));
	p36.setMigrationRates(c(p17, p18, p28, p35), c(0.01, 0.01, 0.01, 0.01));
}





9501:9900 /* newly established subpops grow from 100 individuals to 500 over 400 generations */{
	newSize = 100 + sim.generation - 9500;
	p29.setSubpopulationSize(newSize);
	p30.setSubpopulationSize(newSize);
	p31.setSubpopulationSize(newSize);
	p32.setSubpopulationSize(newSize);
	p33.setSubpopulationSize(newSize);
	p34.setSubpopulationSize(newSize);
	p35.setSubpopulationSize(newSize);
	p36.setSubpopulationSize(newSize);
}





9901 /* third wave of geographic expansion: add new subpopulations and migration rates between subpopulations */ {
	sim.addSubpopSplit("p37", 100, p29);
	sim.addSubpopSplit("p38", 100, p29);
	sim.addSubpopSplit("p39", 100, p30);
	sim.addSubpopSplit("p40", 100, p30);
	sim.addSubpopSplit("p41", 100, p31);
	sim.addSubpopSplit("p42", 100, p31);
	sim.addSubpopSplit("p43", 100, p32);
	sim.addSubpopSplit("p44", 100, p32);
	sim.addSubpopSplit("p45", 100, p33);
	sim.addSubpopSplit("p46", 100, p33);
	sim.addSubpopSplit("p47", 100, p34);
	sim.addSubpopSplit("p48", 100, p34);
	sim.addSubpopSplit("p49", 100, p35);
	sim.addSubpopSplit("p50", 100, p35);
	sim.addSubpopSplit("p51", 100, p36);
	sim.addSubpopSplit("p52", 100, p36);
	p1.setMigrationRates(c(p2, p9, p25, p26, p27, p28), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p2.setMigrationRates(c(p1, p3, p26, p27, p32, p33), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p3.setMigrationRates(c(p2, p4, p26, p27, p32, p33), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p4.setMigrationRates(c(p3, p5), c(0.01, 0.01));
	p5.setMigrationRates(c(p4, p6), c(0.01, 0.01));
	p6.setMigrationRates(c(p5, p7), c(0.01, 0.01));
	p7.setMigrationRates(c(p6, p8), c(0.01, 0.01));
	p8.setMigrationRates(p7, 0.01);
	p9.setMigrationRates(c(p1, p10, p25, p29), c(0.01, 0.01, 0.01, 0.01));
	p10.setMigrationRates(c(p9, p11, p25, p29, p37), c(0.01, 0.01, 0.01, 0.01, 0.01));
	p11.setMigrationRates(c(p10 ,p12, p29, p37), c(0.01, 0.01, 0.01, 0.01));
	p12.setMigrationRates(c(p11, p13), c(0.01, 0.01));
	p13.setMigrationRates(c(p12, p14), c(0.01, 0.01));
	p14.setMigrationRates(c(p13, p15), c(0.01, 0.01));
	p15.setMigrationRates(c(p14, p16), c(0.01, 0.01));
	p16.setMigrationRates(p15, 0.01);
	p17.setMigrationRates(c(p1, p18, p28, p36), c(0.01, 0.01, 0.01, 0.01));
	p18.setMigrationRates(c(p17, p19, p36, p52), c(0.01, 0.01, 0.01, 0.01));
	p19.setMigrationRates(c(p18 ,p20, p52), c(0.01, 0.01, 0.01));
	p20.setMigrationRates(c(p19, p21), c(0.01, 0.01));
	p21.setMigrationRates(c(p20, p22), c(0.01, 0.01));
	p22.setMigrationRates(c(p21, p23), c(0.01, 0.01));
	p23.setMigrationRates(c(p22, p24), c(0.01, 0.01));
	p24.setMigrationRates(p23, 0.01);
	p25.setMigrationRates(c(p1, p9, p10, p26, p29, p30, p31), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p26.setMigrationRates(c(p1, p2, p3, p25, p30, p31, p32), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p27.setMigrationRates(c(p1, p2, p3, p28, p33, p34, p35), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p28.setMigrationRates(c(p1, p17, p18, p27, p34, p35, p36), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p29.setMigrationRates(c(p9, p10, p11, p25, p30, p37, p38, p39), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p30.setMigrationRates(c(p25, p26, p29, p31, p38, p39, p40, p41), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p31.setMigrationRates(c(p25, p26, p30, p32, p40, p41, p42, p43), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p32.setMigrationRates(c(p2, p3, p4, p26, p31, p42, p43, p44), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p33.setMigrationRates(c(p2, p3, p4, p27, p34, p45, p46, p47), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p34.setMigrationRates(c(p27, p28, p33, p35, p46, p47, p48, p49), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p35.setMigrationRates(c(p27, p28, p34, p36, p48, p49, p50, p51), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p36.setMigrationRates(c(p17, p18, p19, p28, p35, p50, p51, p52), c(0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01));
	p37.setMigrationRates(c(p10, p11, p29, p38), c(0.01, 0.01, 0.01, 0.01));
	p38.setMigrationRates(c(p29, p30, p37, p39), c(0.01, 0.01, 0.01, 0.01));
	p39.setMigrationRates(c(p29, p30, p38, p40), c(0.01, 0.01, 0.01, 0.01));
	p40.setMigrationRates(c(p30, p31, p39, p41), c(0.01, 0.01, 0.01, 0.01));
	p41.setMigrationRates(c(p30, p31, p40, p42), c(0.01, 0.01, 0.01, 0.01));
	p42.setMigrationRates(c(p31, p32, p41, p43), c(0.01, 0.01, 0.01, 0.01));
	p43.setMigrationRates(c(p31, p32, p42, p44), c(0.01, 0.01, 0.01, 0.01));
	p44.setMigrationRates(c(p3, p4, p32, p43), c(0.01, 0.01, 0.01, 0.01));
	p45.setMigrationRates(c(p3, p4, p33, p46), c(0.01, 0.01, 0.01, 0.01));
	p46.setMigrationRates(c(p33, p34, p45, p47), c(0.01, 0.01, 0.01, 0.01));
	p47.setMigrationRates(c(p33, p34, p46, p48), c(0.01, 0.01, 0.01, 0.01));
	p48.setMigrationRates(c(p34, p35, p47, p49), c(0.01, 0.01, 0.01, 0.01));
	p49.setMigrationRates(c(p34, p35, p48, p50), c(0.01, 0.01, 0.01, 0.01));
	p50.setMigrationRates(c(p35, p36, p49, p51), c(0.01, 0.01, 0.01, 0.01));
	p51.setMigrationRates(c(p35, p36, p50, p52), c(0.01, 0.01, 0.01, 0.01));
	p52.setMigrationRates(c(p18, p19, p36, p51), c(0.01, 0.01, 0.01, 0.01));
}





9901:10000 /* newly established subpops grow from 100 individuals to 250 over 100 generations */{
	if (sim.generation%2 == 0) {
		newSize = 100 + asInteger(3*((sim.generation/2) - 4950));
		p37.setSubpopulationSize(newSize);
		p38.setSubpopulationSize(newSize);
		p39.setSubpopulationSize(newSize);
		p40.setSubpopulationSize(newSize);
		p41.setSubpopulationSize(newSize);
		p42.setSubpopulationSize(newSize);
		p43.setSubpopulationSize(newSize);
		p44.setSubpopulationSize(newSize);
		p45.setSubpopulationSize(newSize);
		p46.setSubpopulationSize(newSize);
		p47.setSubpopulationSize(newSize);
		p48.setSubpopulationSize(newSize);
		p49.setSubpopulationSize(newSize);
		p50.setSubpopulationSize(newSize);
		p51.setSubpopulationSize(newSize);
		p52.setSubpopulationSize(newSize);
	}
}





1000:10000 early() /* set up mate choice weights */ {
	inds = sim.subpopulations.individuals;
	inds.tag = inds.countOfMutationsOfType(m1);
	
	for (subpop in sim.subpopulations)
	{
		has_m1 = (subpop.individuals.tag > 0);
		subpop.setValue("weights1", ifelse(has_m1, 1.01, 0.99));
		subpop.setValue("weights2", ifelse(has_m1, 0.99, 1.01));
	}
}

1000:10000 mateChoice /* choose mates based on weights */ ()
{
	if (individual.tag > 0)
	{
		return weights * sourceSubpop.getValue("weights1");
	}
	else
	{
		return weights * sourceSubpop.getValue("weights2");
	}
}





2:9500 late() /* create output each generation */ {
// create output - columns are allele freq per subpopulation and Fst between coast and eastern valleys, rows are generations
	cat(paste(sim.generation,
		sim.mutationFrequencies(sim.subpopulations[0], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[1], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[2], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[3], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[4], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[5], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[6], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[7], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[8], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[9], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[10], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[11], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[12], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[13], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[14], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[15], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[16], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[17], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[18], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[19], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[20], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[21], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[22], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[23], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[24], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[25], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[26], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[27], sim.mutationsOfType(m1)) ,
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p8.genomes),
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p16.genomes),
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p24.genomes)) + "\n");
}





9501:9900 late() /* create output each generation */ {
// create output - columns are allele freq per subpopulation and Fst between coast and eastern valleys, rows are generations
	cat(paste(sim.generation,
		sim.mutationFrequencies(sim.subpopulations[0], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[1], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[2], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[3], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[4], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[5], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[6], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[7], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[8], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[9], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[10], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[11], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[12], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[13], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[14], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[15], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[16], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[17], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[18], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[19], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[20], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[21], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[22], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[23], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[24], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[25], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[26], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[27], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[28], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[29], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[30], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[31], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[32], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[33], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[34], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[35], sim.mutationsOfType(m1)) ,
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		"0",
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p8.genomes),
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p16.genomes),
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p24.genomes)) + "\n");
}





9901:10000 late() /* create output each generation */ {
// create output - columns are allele freq per subpopulation and Fst between coast and eastern valleys, rows are generations
	cat(paste(sim.generation,
		sim.mutationFrequencies(sim.subpopulations[0], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[1], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[2], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[3], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[4], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[5], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[6], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[7], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[8], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[9], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[10], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[11], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[12], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[13], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[14], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[15], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[16], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[17], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[18], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[19], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[20], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[21], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[22], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[23], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[24], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[25], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[26], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[27], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[28], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[29], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[30], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[31], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[32], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[33], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[34], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[35], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[36], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[37], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[38], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[39], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[40], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[41], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[42], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[43], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[44], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[45], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[46], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[47], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[48], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[49], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[50], sim.mutationsOfType(m1)) ,
		sim.mutationFrequencies(sim.subpopulations[51], sim.mutationsOfType(m1)) ,
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p8.genomes),
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p16.genomes),
		calcFST(c(p1.genomes, p9.genomes, p17.genomes), p24.genomes)) + "\n");
}





1:10000 late() /* stop simulation if allele lost or fixed */ {
	// stop simulation if allele is lost and print "allele lost"
	if (sim.countOfMutationsOfType(m1) == 0)
	{
		print("allele lost");
		sim.simulationFinished();
	}
	
	// stop simulation if allele fixes in all subpopulations and print "allele fixed"
	if (sim.countOfMutationsOfType(m1) > 0)
	{
		if (sim.mutationCounts(sim.subpopulations, sim.mutationsOfType(m1))/2 == sum(sim.subpopulations.individualCount))
		{
			print("allele fixed");
			sim.simulationFinished();
		}
	}
	
	// print "simulation finished" if simulation finishes	
	if(sim.generation == 10000) {
		print("simulation finished");
		print("simulation finished");
	}
}